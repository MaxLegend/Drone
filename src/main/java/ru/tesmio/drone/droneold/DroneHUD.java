package ru.tesmio.drone.droneold;

import com.mojang.blaze3d.vertex.PoseStack;
import net.minecraft.client.Minecraft;
import net.minecraft.client.gui.GuiGraphics;
import net.minecraft.core.BlockPos;
import net.minecraft.network.chat.Component;
import net.minecraft.util.Mth;
import net.minecraft.world.entity.player.Player;
import net.minecraft.world.phys.Vec3;
import ru.tesmio.drone.drone.DroneEntity;

public class DroneHUD {
    private static final Minecraft mc = Minecraft.getInstance();

    public static void render(GuiGraphics guiGraphics, float partialTicks) {
        if (!(mc.getCameraEntity() instanceof DroneEntity drone)) return;

        int width = mc.getWindow().getGuiScaledWidth();
        int height = mc.getWindow().getGuiScaledHeight();
        PoseStack poseStack = guiGraphics.pose();

        // –ü–æ–ª—É—á–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ
        Vec3 velocity = drone.getDeltaMovement();
        float speed = (float) velocity.length() * 20; // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –±–ª–æ–∫–∏/—Å–µ–∫
        String direction = getCardinalDirection(drone.getYRot());
        BlockPos pos = drone.blockPosition();
        String coordinates = String.format("X: %d Y: %d Z: %d", pos.getX(), pos.getY(), pos.getZ());

        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å —Å–∏–≥–Ω–∞–ª–∞ (—Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –∏–≥—Ä–æ–∫–∞)
        float signalStrength = calculateSignalStrength(drone);

        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—ã—Å–æ—Ç—É –¥–æ –∑–µ–º–ª–∏
        float heightAboveGround = calculateHeightAboveGround(drone);
        String uuidclient = drone.getControllerUUID() == null ? "üü• DISCONNECTED" : "üü© CONNECTED";
        // –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç—Ä–∏—Å–æ–≤–∫—É
        poseStack.pushPose();

        // –§–æ–Ω –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        guiGraphics.fill(width - 150, 10, width - 10, 100, 0x80000000);
//        guiGraphics.drawString(mc.font, uuidclient,
//                width - 140, 5, 0xFFFFFF);

        // –°–∫–æ—Ä–æ—Å—Ç—å
        guiGraphics.drawString(mc.font, Component.literal("–°–∫–æ—Ä–æ—Å—Ç—å: " + String.format("%.1f", speed) + " –º/—Å"),
                width - 140, 20, 0xFFFFFF);

        // –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        guiGraphics.drawString(mc.font, Component.literal("–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: " + direction),
                width - 140, 35, 0xFFFFFF);

        // –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        guiGraphics.drawString(mc.font, Component.literal(coordinates),
                width - 140, 50, 0xFFFFFF);

        // –£—Ä–æ–≤–µ–Ω—å —Å–∏–≥–Ω–∞–ª–∞ (—Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –∏–≥—Ä–æ–∫–∞)
        guiGraphics.drawString(mc.font, Component.literal("–°–∏–≥–Ω–∞–ª: " + String.format("%.0f", signalStrength) + "%"),
                width - 140, 65, getSignalColor(signalStrength));

        // –í—ã—Å–æ—Ç–∞ –Ω–∞–¥ –∑–µ–º–ª–µ–π
        guiGraphics.drawString(mc.font, Component.literal("–í—ã—Å–æ—Ç–∞: " + String.format("%.1f", heightAboveGround) + " –º"),
                width - 140, 80, 0xFFFFFF);

        poseStack.popPose();
    }

    private static String getCardinalDirection(float yaw) {
        // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —É–≥–æ–ª –æ—Ç 0 –¥–æ 360
        yaw = (yaw % 360 + 360) % 360;

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        if (yaw >= 337.5 || yaw < 22.5) return "–Æ–≥";
        else if (yaw >= 22.5 && yaw < 67.5) return "–Æ–≥–æ-–∑–∞–ø–∞–¥";
        else if (yaw >= 67.5 && yaw < 112.5) return "–ó–∞–ø–∞–¥";
        else if (yaw >= 112.5 && yaw < 157.5) return "–°–µ–≤–µ—Ä–æ-–∑–∞–ø–∞–¥";
        else if (yaw >= 157.5 && yaw < 202.5) return "–°–µ–≤–µ—Ä";
        else if (yaw >= 202.5 && yaw < 247.5) return "–°–µ–≤–µ—Ä–æ-–≤–æ—Å—Ç–æ–∫";
        else if (yaw >= 247.5 && yaw < 292.5) return "–í–æ—Å—Ç–æ–∫";
        else return "–Æ–≥–æ-–≤–æ—Å—Ç–æ–∫";
    }

    private static float calculateSignalStrength(DroneEntity drone) {
       // System.out.println("player " + drone.getControllingPlayerUUID());
        if (drone.getControllerUUID() == null) return 0;

        Player player = drone.level().getPlayerByUUID(drone.getControllerUUID());

        if (player == null) return 0;
        // System.out.println("player " + drone.getControllingPlayerUUID());
        float maxDist = Math.min(drone.getSyncView(), drone.getSyncSimDist());
       // double maxDist = (minChunks - 2) * 16.0;
        double maxDistSq = maxDist * maxDist;
        double distance = player.distanceTo(drone);
        double maxDistance = maxDistSq; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        //  System.out.println("player " +drone.getSyncView());
        double signal = 100 * (1 - distance / maxDistSq);

        return (float) Mth.clamp(signal, 0, 100);
    }

    private static float calculateHeightAboveGround(DroneEntity drone) {
        // –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –æ—Ç –ø–æ–∑–∏—Ü–∏–∏ –¥—Ä–æ–Ω–∞ –≤–Ω–∏–∑
        for (int y = (int) drone.getY(); y > 0; y--) {
            BlockPos pos = new BlockPos((int) drone.getX(), y, (int) drone.getZ());
            if (!drone.level().isEmptyBlock(pos)) {
                return (float) (drone.getY() - y - 1); // -1 —á—Ç–æ–±—ã —É—á–µ—Å—Ç—å —á—Ç–æ –±–ª–æ–∫ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å —Ü–µ–ª–æ–≥–æ Y
            }
        }
        return (float) drone.getY(); // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –±–ª–æ–∫–æ–≤, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—É—é –≤—ã—Å–æ—Ç—É
    }

    private static int getSignalColor(float strength) {
        if (strength > 75) return 0x00FF00; // –ó–µ–ª–µ–Ω—ã–π
        else if (strength > 50) return 0xFFFF00; // –ñ–µ–ª—Ç—ã–π
        else if (strength > 25) return 0xFFA500; // –û—Ä–∞–Ω–∂–µ–≤—ã–π
        else return 0xFF0000; // –ö—Ä–∞—Å–Ω—ã–π
    }
}
